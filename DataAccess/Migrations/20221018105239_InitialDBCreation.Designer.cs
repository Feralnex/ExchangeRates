// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ExchangeRatesContext))]
    [Migration("20221018105239_InitialDBCreation")]
    partial class InitialDBCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Models.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DataAccess.Models.MidExchangeRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("MidExchangeRates");
                });

            modelBuilder.Entity("DataAccess.Models.MidRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("Mid")
                        .HasColumnType("decimal(18,10)");

                    b.Property<int?>("MidExchangeRatesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("MidExchangeRatesId");

                    b.ToTable("MidRates");
                });

            modelBuilder.Entity("DataAccess.Models.TradeExchangeRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TradeExchangeRates");
                });

            modelBuilder.Entity("DataAccess.Models.TradeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Ask")
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("Bid")
                        .HasColumnType("decimal(18,10)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("TradeExchangeRatesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("TradeExchangeRatesId");

                    b.ToTable("TradeRates");
                });

            modelBuilder.Entity("DataAccess.Models.MidRate", b =>
                {
                    b.HasOne("DataAccess.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("DataAccess.Models.MidExchangeRates", null)
                        .WithMany("Rates")
                        .HasForeignKey("MidExchangeRatesId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DataAccess.Models.TradeRate", b =>
                {
                    b.HasOne("DataAccess.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("DataAccess.Models.TradeExchangeRates", null)
                        .WithMany("Rates")
                        .HasForeignKey("TradeExchangeRatesId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DataAccess.Models.MidExchangeRates", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("DataAccess.Models.TradeExchangeRates", b =>
                {
                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
